pipeline {
    agent any
    
    environment{
        EKS_Cluster_API_ENDPOINT="https://04CE7551EE64665FB0761E3D71993337.gr7.ap-south-1.eks.amazonaws.com"
        SERVICE_ENDPOINT = ""
        EXPOSED_PORT = ""
        SLACK_CHANNEL = "#jenkins"
        SLACK_CREDENTIALS_ID = "slack-token"
    }

    stages {
        stage('Download Artifacts') {
            steps {
                copyArtifacts(
                    projectName: 'CI_MultiTierToK8s', 
                    filter: 'Manifests/*.yml',
                    fingerprintArtifacts: true
                )
            }
        }
        
        
         stage('Deploy to Production? Dont forget to update the secret token before approving') {
            steps {
                script {
                    def userInput = input(
                        message: 'Updated the secret?Ready to Deploy?',
                        parameters: [
                            choice(name: 'Proceed', choices: ['Yes', 'No'], description: 'Select Yes to continue, No to stop.')
                        ]
                    )
                    if (userInput == 'No') {
                        error("Deployment aborted by user.")
                    }
                }
            }
        }

        
        stage('Deploy to k8s') {
            steps {
                withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'my-eks-cluster', contextName: '', credentialsId: 'k8s-serviceaccount-token', namespace: 'opstree', serverUrl: EKS_Cluster_API_ENDPOINT]]) {
                    sh "kubectl apply -f ./Manifests/dss.yml"
                    sh "sleep 40"
                }
            }
        }
        
        stage('Check if k8s deployment created') {
            steps {
                script{
                    withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'my-eks-cluster', contextName: '', credentialsId: 'k8s-serviceaccount-token', namespace: 'opstree', serverUrl: EKS_Cluster_API_ENDPOINT]]) {
                        sh "kubectl get pods -n opstree"
                        sh "kubectl get svc -n opstree"
                        
                        def serviceEndpoint = sh(script: "kubectl get svc -n opstree -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}'", returnStdout: true).trim()
                        def exposedPort = sh(script: "kubectl get svc -n opstree -o jsonpath='{.items[0].spec.ports[0].port}'", returnStdout: true).trim()
                
                        env.SERVICE_ENDPOINT = serviceEndpoint
                        env.EXPOSED_PORT = exposedPort
                        
                        
                        echo "SERVICE_ENDPOINT: ${env.SERVICE_ENDPOINT}"
                        echo "EXPOSED_PORT: ${env.EXPOSED_PORT}"
                    }
                }
            }
        }
    }
    post{
        success{
            script{
                def message = """
                ‚úÖ *Kubernetes Deployment Successful!*
                üèó *Job:* ${env.JOB_NAME}  
                üîÑ *Build Number:* #${env.BUILD_NUMBER}  
                üîó *Service Endpoint:* http://${env.SERVICE_ENDPOINT}:${env.EXPOSED_PORT} 
            """
            slackSend(channel: SLACK_CHANNEL, color: 'good', message: message)
            }
        }
        failure{
            script{
                def message = """
                    ‚úÖ *Kubernetes Deployment Failed*
                    üèó *Job:* ${env.JOB_NAME}  
                    üîÑ *Build Number:* #${env.BUILD_NUMBER}  
                    üîó *Build URL:*  <${env.BUILD_URL}>  
                """
            slackSend(channel: SLACK_CHANNEL, color: 'danger', message: message)
            }
        }
    }
}
